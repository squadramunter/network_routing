#!/bin/bash

# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

trap '' 2
while true
do
  clear
  echo "================================================================================"
  echo "//      Traffic routing from Wireless to Ethernet made by @SquadraMunter      //"
  echo "================================================================================"
  echo "Enter 1 to setup the routing automatically: "
  echo "Enter 2 to test the network connectivity: "
  echo "Enter q to exit the menu q: "
  echo -e "\n"
  echo -e "Enter your selection \c"
  read answer
  case "$answer" in
1)

if eth=`basename -a /sys/class/net/* | grep eth`; then
  echo "Adapter "$eth" is alive and working properly..."
fi

if ens=`basename -a /sys/class/net/* | grep ens`; then
  echo "Adapter "$ens" is alive and working properly..."
fi

if enp=`basename -a /sys/class/net/* | grep enp`; then
  echo "Adapter "$enp" is alive and working properly..."
fi

if wlan=`basename -a /sys/class/net/* | grep wlan`; then
  echo "Adapter "$wlan" is alive and working properly..."
fi

if wlx=`basename -a /sys/class/net/* | grep wlx`; then
  echo "Adapter "$wlx" is alive and working properly..."
fi

if wlp=`basename -a /sys/class/net/* | grep wlp`; then
  echo "Adapter "$wlp" is alive and working properly..."
fi

sleep 10

detect=`basename -a /sys/class/net/* | grep 'eth\|ens\|enp'`
wifi=`basename -a /sys/class/net/* | grep 'wlan\|wlx\|wlp'`

apt-get update && apt-get upgrade -y && apt-get install git -y

mv /etc/network/interfaces /etc/network/interfaces-old

touch /etc/network/interfaces

CFILE="/etc/network/interfaces"

/bin/cat <<EOM >$CFILE
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

allow-hotplug $wifi
iface $wifi inet dhcp

allow-hotplug $detect
iface $detect inet static
    address 172.24.1.1
    netmask 255.255.255.0
    network 172.24.1.0
    broadcast 172.24.1.255
EOM

ip addr flush $detect && systemctl restart networking.service
ifdown $detect && ifup $detect

apt-get install dnsmasq

mv /etc/dnsmasq.conf /etc/dnsmasq.conf.orig

touch /etc/dnsmasq.conf

DNSMASQ="/etc/dnsmasq.conf"

/bin/cat <<EOM >$DNSMASQ
interface=$detect
listen-address=172.24.1.1 # Explicitly specify the address to listen on
bind-interfaces      # Bind to the interface to make sure we aren't sending things elsewhere
server=8.8.8.8       # Forward DNS requests to Google DNS
domain-needed        # Don't forward short names
bogus-priv           # Never forward addresses in the non-routed address spaces.
dhcp-range=172.24.1.50,172.24.1.150,12h # Assign IP addresses between 172.24.1.50 and 172.24.1.150 with a 12 hour lease time
EOM

sed -i '/managed=/c\managed=true' /etc/NetworkManager/NetworkManager.conf

sed -i '/#net.ipv4.ip_forward=1/c\net.ipv4.ip_forward=1' /etc/sysctl.conf

sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

iptables -t nat -A POSTROUTING -o $wifi -j MASQUERADE
iptables -A FORWARD -i $wifi -o $detect -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A FORWARD -i $detect -o $wifi -j ACCEPT

apt-get install iptables-persistent -y

iptables-save > /etc/iptables/rules.v4
ip6tables-save > /etc/iptables/rules.v6

systemctl enable dnsmasq
systemctl restart dnsmasq

service network-manager restart
ifdown $wifi && ifup $wifi
ifdown $detect && ifup $detect

echo You should reboot your system to make sure everything is working fine!

;;

2)

if ping -q -c 1 -W 1 172.24.1.1 >/dev/null; then
  echo "IPv4 is up and network routing is enabled!"
else
  echo "IPv4 is down and network routing is disabled!"
fi

if ping -q -c 1 -W 1 google.com >/dev/null; then
  echo "Yes! Network connection is working as pretended!"
else
  echo "Oops I can't establish a connection!"
fi

;;

q) exit ;;

  esac
  echo -e "Enter return to continue \c"
  read input
done
